{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text } from 'react-native-paper';\nimport Background from \"../../components/Background\";\nimport Logo from \"../../components/Logo\";\nimport Header from \"../../components/Header\";\nimport Button from \"../../components/Button\";\nimport TextInput from \"../../components/TextInput\";\nimport BackButton from \"../../components/BackButton\";\nimport { theme } from \"../../core/theme\";\nimport { emailValidator } from \"../../helpers/emailValidator\";\nimport { passwordValidator } from \"../../helpers/passwordValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var onLoginPressed = function onLoginPressed() {\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        error: emailError\n      }));\n      setPassword(_objectSpread(_objectSpread({}, password), {}, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    navigation.reset({\n      index: 0,\n      routes: [{\n        name: 'Dashboard'\n      }]\n    });\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(BackButton, {\n      goBack: navigation.goBack\n    }), _jsx(Logo, {}), _jsx(Header, {\n      children: \"Welcome back.\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ResetPasswordScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don\\u2019t have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace('RegisterScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"names":["React","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","LoginScreen","navigation","useState","value","error","email","setEmail","password","setPassword","onLoginPressed","emailError","passwordError","reset","index","routes","name","goBack","text","styles","forgotPassword","navigate","forgot","row","replace","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","fontSize","color","colors","secondary","fontWeight","primary"],"sources":["C:/Programming/Pantry App/navigation/screens/LoginScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport {View, StyleSheet, TouchableOpacity} from 'react-native';\r\nimport {Text} from 'react-native-paper';\r\nimport Background from '../../components/Background'\r\nimport Logo from '../../components/Logo'\r\nimport Header from '../../components/Header'\r\nimport Button from '../../components/Button'\r\nimport TextInput from '../../components/TextInput'\r\nimport BackButton from '../../components/BackButton'\r\nimport {theme} from '../../core/theme'\r\nimport { emailValidator } from '../../helpers/emailValidator'\r\nimport { passwordValidator } from '../../helpers/passwordValidator'\r\n\r\n\r\nexport default function LoginScreen({ navigation }) {\r\n  const [email, setEmail] = useState({ value: '', error: '' })\r\n  const [password, setPassword] = useState({ value: '', error: '' })\r\n\r\n  const onLoginPressed = () => {\r\n    const emailError = emailValidator(email.value)\r\n    const passwordError = passwordValidator(password.value)\r\n    if (emailError || passwordError) {\r\n      setEmail({ ...email, error: emailError })\r\n      setPassword({ ...password, error: passwordError })\r\n      return\r\n    }\r\n    navigation.reset({\r\n      index: 0,\r\n      routes: [{ name: 'Dashboard' }],\r\n    })\r\n  }\r\n      return (\r\n        <Background>\r\n          <BackButton goBack={navigation.goBack} />\r\n          <Logo />\r\n          <Header>Welcome back.</Header>\r\n          <TextInput\r\n            label=\"Email\"\r\n            returnKeyType=\"next\"\r\n            value={email.value}\r\n            onChangeText={(text) => setEmail({ value: text, error: '' })}\r\n            error={!!email.error}\r\n            errorText={email.error}\r\n            autoCapitalize=\"none\"\r\n            autoCompleteType=\"email\"\r\n            textContentType=\"emailAddress\"\r\n            keyboardType=\"email-address\"\r\n          />\r\n          <TextInput\r\n            label=\"Password\"\r\n            returnKeyType=\"done\"\r\n            value={password.value}\r\n            onChangeText={(text) => setPassword({ value: text, error: '' })}\r\n            error={!!password.error}\r\n            errorText={password.error}\r\n            secureTextEntry\r\n          />\r\n          <View style={styles.forgotPassword}>\r\n            <TouchableOpacity\r\n              onPress={() => navigation.navigate('ResetPasswordScreen')}\r\n            >\r\n              <Text style={styles.forgot}>Forgot your password?</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <Button mode=\"contained\" onPress={onLoginPressed}>\r\n            Login\r\n          </Button>\r\n          <View style={styles.row}>\r\n            <Text>Donâ€™t have an account? </Text>\r\n            <TouchableOpacity onPress={() => navigation.replace('RegisterScreen')}>\r\n              <Text style={styles.link}>Sign up</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </Background>\r\n      ) \r\n\r\n}\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    forgotPassword: {\r\n        width: '100%',\r\n        alignItems: 'flex-end',\r\n        marginBottom: 24,\r\n      },\r\n      row: {\r\n        flexDirection: 'row',\r\n        marginTop: 4,\r\n      },\r\n      forgot: {\r\n        fontSize: 13,\r\n        color: theme.colors.secondary,\r\n      },\r\n      link: {\r\n        fontWeight: 'bold',\r\n        color: theme.colors.primary,\r\n      },\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}